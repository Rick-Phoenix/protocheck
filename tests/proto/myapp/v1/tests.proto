syntax = "proto3";

package myapp.v1;

import "buf/validate/validate.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

enum test_enum {
  option allow_alias = true;

  UNSPECIFIED = 0;
  ACTIVE = 1;
  INACTIVE = 2;
  PASSIVE = 2;
}

message LargeListsTests {
  test_enum enum_field = 7 [(buf.validate.field).enum = {
    in: [
      1,
      2
    ]
    not_in: [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36
    ]
  }];

  bytes bytes_field = 8 [(buf.validate.field).bytes = {
    in: ["\x03\x04"]
    not_in: [
      "\x01\x02",
      "\x02\x03"
    ]
  }];

  string name = 1 [(buf.validate.field).string = {
    in: [
      "alfredo",
      "maurizio"
    ]
    not_in: ["ermenegildo"]
  }];
  google.protobuf.Any any_field = 6 [(buf.validate.field).any = {
    in: [
      "a   1",
      "a   2",
      "a   3",
      "a   4",
      "a   5",
      "a   6",
      "a   7",
      "a   8",
      "a   9",
      "a   10",
      "a   11",
      "a   12",
      "a   13",
      "a   14",
      "a   15",
      "a   16"
    ]
    not_in: [
      "a   17",
      "a   18",
      "a   19",
      "a   20",
      "a   21",
      "a   22",
      "a   23",
      "a   24",
      "a   25",
      "a   26",
      "a   27",
      "a   28",
      "a   29",
      "a   30",
      "a   31",
      "a   32",
      "a   33"
    ]
  }];
  float float_field = 2 [(buf.validate.field).float = {
    in: [
      1.0,
      2.0,
      3.0,
      4.0,
      5.0,
      6.0,
      7.0,
      8.0,
      9.0,
      10.0,
      11.0,
      12.0,
      13.0,
      14.0,
      15.0,
      16.0,
      17.0
    ]
    not_in: [
      18.0,
      19.0,
      20.0,
      21.0,
      22.0,
      23.0,
      24.0,
      25.0,
      26.0,
      27.0,
      28.0,
      29.0,
      30.0,
      31.0,
      32.0
    ]
  }];
  double double_field = 3 [(buf.validate.field).double = {
    in: [
      1.0,
      2.0,
      3.0,
      4.0,
      5.0,
      6.0,
      7.0,
      8.0,
      9.0,
      10.0,
      11.0,
      12.0,
      13.0,
      14.0,
      15.0,
      16.0,
      17.0
    ]
    not_in: [
      18.0,
      19.0,
      20.0,
      21.0,
      22.0,
      23.0,
      24.0,
      25.0,
      26.0,
      27.0,
      28.0,
      29.0,
      30.0,
      31.0,
      32.0
    ]
  }];
  google.protobuf.Duration duration_field = 4 [(buf.validate.field).duration = {
    in: [
      {
        seconds: 1
        nanos: 0
      },
      {
        seconds: 1
        nanos: 0
      },
      {
        seconds: 2
        nanos: 0
      },
      {
        seconds: 3
        nanos: 0
      },
      {
        seconds: 4
        nanos: 0
      },
      {
        seconds: 5
        nanos: 0
      },
      {
        seconds: 6
        nanos: 0
      },
      {
        seconds: 7
        nanos: 0
      },
      {
        seconds: 8
        nanos: 0
      },
      {
        seconds: 9
        nanos: 0
      },
      {
        seconds: 10
        nanos: 0
      },
      {
        seconds: 11
        nanos: 0
      },
      {
        seconds: 12
        nanos: 0
      },
      {
        seconds: 13
        nanos: 0
      },
      {
        seconds: 14
        nanos: 0
      },
      {
        seconds: 15
        nanos: 0
      }
    ]
    not_in: [
      {
        seconds: 16
        nanos: 0
      },
      {
        seconds: 17
        nanos: 0
      },
      {
        seconds: 18
        nanos: 0
      },
      {
        seconds: 19
        nanos: 0
      },
      {
        seconds: 20
        nanos: 0
      },
      {
        seconds: 21
        nanos: 0
      },
      {
        seconds: 22
        nanos: 0
      },
      {
        seconds: 23
        nanos: 0
      },
      {
        seconds: 24
        nanos: 0
      },
      {
        seconds: 25
        nanos: 0
      },
      {
        seconds: 26
        nanos: 0
      },
      {
        seconds: 27
        nanos: 0
      },
      {
        seconds: 28
        nanos: 0
      },
      {
        seconds: 29
        nanos: 0
      },
      {
        seconds: 30
        nanos: 0
      },
      {
        seconds: 31
        nanos: 0
      },
      {
        seconds: 32
        nanos: 0
      }
    ]
  }];
  int64 int64_field = 5 [(buf.validate.field).int64 = {
    in: [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18
    ]
    not_in: [
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36
    ]
  }];
}

message FiniteRulesTests {
  float finite_float = 1 [(buf.validate.field).float.finite = true];
  double finite_double = 2 [(buf.validate.field).double.finite = true];
}

message ComparableRulesTests {
  google.protobuf.Timestamp timestamp_gt = 1 [(buf.validate.field).timestamp.gt = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Timestamp timestamp_gte = 2 [(buf.validate.field).timestamp.gte = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Timestamp timestamp_lt = 3 [(buf.validate.field).timestamp.lt = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Timestamp timestamp_lte = 4 [(buf.validate.field).timestamp.lte = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Duration duration_gt = 5 [(buf.validate.field).duration.gt = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Duration duration_gte = 6 [(buf.validate.field).duration.gte = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Duration duration_lt = 7 [(buf.validate.field).duration.lt = {
    seconds: 100
    nanos: 0
  }];
  google.protobuf.Duration duration_lte = 8 [(buf.validate.field).duration.lte = {
    seconds: 100
    nanos: 0
  }];
  int64 int64_gt = 9 [(buf.validate.field).int64.gt = 5];
  int64 int64_gte = 10 [(buf.validate.field).int64.gte = 5];
  int64 int64_lt = 11 [(buf.validate.field).int64.lt = 5];
  int64 int64_lte = 12 [(buf.validate.field).int64.lte = 5];
}

message TimestampTests {
  google.protobuf.Timestamp within = 1 [(buf.validate.field).timestamp.within = {
    seconds: 3600
    nanos: 0
  }];
  google.protobuf.Timestamp gt_now = 2 [(buf.validate.field).timestamp.gt_now = true];
  google.protobuf.Timestamp lt_now = 3 [(buf.validate.field).timestamp.lt_now = true];
}

message WellKnownStrings {
  string email = 1 [(buf.validate.field).string.email = true];
  string hostname = 2 [(buf.validate.field).string.hostname = true];
  string ip = 3 [(buf.validate.field).string.ip = true];
  string ipv4 = 4 [(buf.validate.field).string.ipv4 = true];
  string ipv6 = 5 [(buf.validate.field).string.ipv6 = true];
  string uri = 6 [(buf.validate.field).string.uri = true];
  string uri_ref = 7 [(buf.validate.field).string.uri_ref = true];
  string address = 8 [(buf.validate.field).string.address = true];
  string uuid = 9 [(buf.validate.field).string.uuid = true];
  string tuuid = 10 [(buf.validate.field).string.tuuid = true];
  string ip_with_prefixlen = 11 [(buf.validate.field).string.ip_with_prefixlen = true];
  string ipv4_with_prefixlen = 12 [(buf.validate.field).string.ipv4_with_prefixlen = true];
  string ipv6_with_prefixlen = 13 [(buf.validate.field).string.ipv6_with_prefixlen = true];
  string ip_prefix = 14 [(buf.validate.field).string.ip_prefix = true];
  string ipv4_prefix = 15 [(buf.validate.field).string.ipv4_prefix = true];
  string ipv6_prefix = 16 [(buf.validate.field).string.ipv6_prefix = true];
  string host_and_port = 17 [(buf.validate.field).string.host_and_port = true];
  string header_name_strict = 18 [(buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_NAME];
  string header_value_strict = 19 [(buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_VALUE];
  string header_name_loose = 20 [
    (buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_NAME,
    (buf.validate.field).string.strict = false
  ];
  string header_value_loose = 21 [
    (buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_VALUE,
    (buf.validate.field).string.strict = false
  ];
}

message IgnoreAlwaysTest {
  string name = 1 [
    (buf.validate.field).string.const = "abc",
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];

  bytes bytes = 2 [
    (buf.validate.field).bytes.const = "abc",
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  int64 int64 = 3 [
    (buf.validate.field).int64.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  int32 int32 = 4 [
    (buf.validate.field).int32.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  uint64 uint64 = 5 [
    (buf.validate.field).uint64.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  uint32 uint32 = 6 [
    (buf.validate.field).uint32.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  sint64 sint64 = 7 [
    (buf.validate.field).sint64.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  sint32 sint32 = 8 [
    (buf.validate.field).sint32.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  fixed64 fixed64 = 9 [
    (buf.validate.field).fixed64.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  fixed32 fixed32 = 10 [
    (buf.validate.field).fixed32.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  sfixed64 sfixed64 = 11 [
    (buf.validate.field).sfixed64.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  sfixed32 sfixed32 = 12 [
    (buf.validate.field).sfixed32.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
  test_enum enum_field = 13 [
    (buf.validate.field).enum.const = 15,
    (buf.validate.field).ignore = IGNORE_ALWAYS
  ];
}

message IgnoreIfZeroValueTest {
  string name = 1 [
    (buf.validate.field).string.const = "abc",
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];

  bytes bytes = 2 [
    (buf.validate.field).bytes.const = "abc",
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  int64 int64 = 3 [
    (buf.validate.field).int64.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  int32 int32 = 4 [
    (buf.validate.field).int32.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  uint64 uint64 = 5 [
    (buf.validate.field).uint64.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  uint32 uint32 = 6 [
    (buf.validate.field).uint32.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  sint64 sint64 = 7 [
    (buf.validate.field).sint64.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  sint32 sint32 = 8 [
    (buf.validate.field).sint32.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  fixed64 fixed64 = 9 [
    (buf.validate.field).fixed64.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  fixed32 fixed32 = 10 [
    (buf.validate.field).fixed32.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  sfixed64 sfixed64 = 11 [
    (buf.validate.field).sfixed64.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  sfixed32 sfixed32 = 12 [
    (buf.validate.field).sfixed32.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
  test_enum enum_field = 13 [
    (buf.validate.field).enum.const = 15,
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];

  google.protobuf.Duration duration_field = 14 [(buf.validate.field).duration.const = {
    seconds: 3600
    nanos: 0
  }];

  google.protobuf.Timestamp timestamp_field = 15 [(buf.validate.field).timestamp.const = {
    seconds: 3600
    nanos: 0
  }];
}

message BytesTests {
  bytes pattern_field = 1 [(buf.validate.field).bytes.pattern = "^abc"];
  bytes contains_field = 2 [(buf.validate.field).bytes.contains = "abc"];
  bytes prefix_field = 3 [(buf.validate.field).bytes.prefix = "abc"];
  bytes suffix_field = 4 [(buf.validate.field).bytes.suffix = "abc"];
  bytes ip = 5 [(buf.validate.field).bytes.ip = true];
  bytes ipv4 = 6 [(buf.validate.field).bytes.ipv4 = true];
  bytes ipv6 = 7 [(buf.validate.field).bytes.ipv6 = true];
}

message OptionalTests {
  optional string name = 1 [(buf.validate.field).string.min_len = 10];
  optional float float_field = 2 [(buf.validate.field).float.gt = 10];
  optional double double_field = 3 [(buf.validate.field).double.gt = 10];
  optional int64 int64_field = 4 [(buf.validate.field).int64.gt = 10];
  optional bytes bytes_field = 5 [(buf.validate.field).bytes.min_len = 10];
}

message ContainingTests {
  test_enum enum_field = 7 [(buf.validate.field).enum = {
    in: [
      1,
      2
    ]
    not_in: [15]
    defined_only: true
  }];

  bytes bytes_field = 8 [(buf.validate.field).bytes = {
    in: ["\x03\x04"]
    not_in: [
      "\x01\x02",
      "\x02\x03"
    ]
  }];

  string name = 1 [(buf.validate.field).string = {
    in: [
      "alfredo",
      "maurizio"
    ]
    not_in: ["ermenegildo"]
  }];
  google.protobuf.Any any_field = 6 [(buf.validate.field).any = {
    in: [
      "type.googleapis.com/NiceType",
      "type.googleapis.com/NiceType2"
    ]
    not_in: ["type.googleapis.com/Nope"]
  }];
  float float_field = 2 [(buf.validate.field).float = {
    in: [
      1.5,
      2.5
    ]
    not_in: [2.0]
  }];
  double double_field = 3 [(buf.validate.field).double = {
    in: [
      1.5,
      2.5
    ]
    not_in: [2.0]
  }];
  google.protobuf.Duration duration_field = 4 [(buf.validate.field).duration = {
    in: [
      {
        seconds: 3600
        nanos: 0
      },
      {
        seconds: 5800
        nanos: 19001
      }
    ]
    not_in: [
      {
        seconds: 0
        nanos: 0
      }
    ]
  }];
  int64 int64_field = 5 [(buf.validate.field).int64 = {
    in: [
      1,
      2
    ]
    not_in: [5]
  }];
}

message StringTests {
  string email = 1 [(buf.validate.field).string.email = true];
  string regex_test = 2 [(buf.validate.field).string.pattern = "^abc$"];
  string contains_test = 3 [(buf.validate.field).string.contains = "abc"];
  string not_contains_test = 4 [(buf.validate.field).string.not_contains = "abc"];
  string prefix_test = 5 [(buf.validate.field).string.prefix = "abc"];
  string suffix_test = 6 [(buf.validate.field).string.suffix = "abc"];
}

message RepeatedTests {
  message Person {
    option (buf.validate.message).cel = {
      id: "message.person_name"
      message: "name must be 'alfonso'"
      expression: "this.name == 'alfonso'"
    };

    string name = 1 [(buf.validate.field).cel = {
      id: "message_field.person_name"
      message: "name must be 'alfonso'"
      expression: "this == 'alfonso'"
    }];
  }

  repeated float unique_floats = 2 [
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.min_items = 3
  ];
  repeated double unique_doubles = 3 [
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.max_items = 1
  ];
  repeated string unique_strings = 4 [(buf.validate.field).repeated.unique = true];

  repeated Person people = 1 [(buf.validate.field).repeated.items.cel = {
    id: "repeated_item.person_name"
    message: "name must be 'alfonso'"
    expression: "this.name == 'alfonso'"
  }];
}

message Recursive {
  oneof oneofs {
    Recursive recursive_oneof = 3 [(buf.validate.field).cel = {
      id: "id.is_4"
      message: "id must be 4"
      expression: "this.id == 4"
    }];

    int64 tag = 4;
  }

  option (buf.validate.message).cel = {
    id: "id.is_2"
    message: "id must be 2"
    expression: "this.id == 2"
  };

  Recursive recursive = 1 [(buf.validate.field).cel = {
    id: "id.is_3"
    message: "id must be 3"
    expression: "this.id == 3"
  }];

  int64 id = 2;
}

message MessageMap {
  message Person {
    option (buf.validate.message).cel = {
      id: "message.person_name"
      message: "name must be 'alfonso'"
      expression: "this.name == 'alfonso'"
    };

    string name = 1 [(buf.validate.field).cel = {
      id: "message_field.person_name"
      message: "name must be 'alfonso'"
      expression: "this == 'alfonso'"
    }];
  }

  map<int64, Person> message_map = 1 [(buf.validate.field).map.values.cel = {
    id: "map_value.person_name"
    message: "name must be 'alfonso'"
    expression: "this.name == 'alfonso'"
  }];
}

message DurationMap {
  map<string, google.protobuf.Duration> duration_map = 1 [(buf.validate.field).map = {
    values: {
      duration: {
        gt: {
          seconds: 3600
          nanos: 0
        }
      }
      cel: {
        id: "duration_map_value"
        message: "duration map value must be more than 1h"
        expression: "this > duration('1h')"
      }
    }
  }];
}

message TimestampMap {
  map<string, google.protobuf.Timestamp> timestamp_map = 1 [(buf.validate.field).map = {
    values: {
      timestamp: {
        gt_now: true
        within: {
          seconds: 3600
          nanos: 0
        }
      }
      cel: {
        id: "timestamp_map_value"
        message: "timestamp map value must be later than 2023"
        expression: "this > timestamp('2023-10-27T10:00:00Z')"
      }
    }
  }];
}

message BasicMap {
  map<string, string> string_map = 1 [(buf.validate.field).map = {
    min_pairs: 2
    max_pairs: 2
    keys: {
      string: {min_len: 3}
      cel: {
        id: "map_key_cel"
        message: "map key has to be 'abc'"
        expression: "this == 'abc'"
      }
    }
    values: {
      string: {max_len: 3}
      cel: {
        id: "map_value_cel"
        message: "map value has to be 'abc'"
        expression: "this == 'abc'"
      }
    }
  }];
}
