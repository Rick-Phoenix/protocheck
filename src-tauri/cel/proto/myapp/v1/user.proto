syntax = "proto3";

package myapp.v1;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

message User {
  option (buf.validate.message).cel = {
    id: "user.id.not_alfonso"
    message: "somemessage"
    expression: "this.name == 'alfonso'"
  };

  enum test_enum {
    option allow_alias = true;

    UNSPECIFIED = 0;
    ACTIVE = 1;
    INACTIVE = 2;
    PASSIVE = 2;
  }
  oneof oneof_fields {
    option (buf.validate.oneof).required = true;
    string field_1 = 20;
    string field_2 = 21;
  }
  message Post {
    repeated string tags = 10 [(buf.validate.field).repeated.items = {
      string: {max_len: 2}
    }];
  }
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 1,
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).cel = {
      id: "name.not_alfonso"
      message: "field_validation"
      expression: "this == 'alfonso'"
    }
  ];
  repeated string value = 10 [(buf.validate.field).repeated.items = {
    string: {max_len: 1}
  }];
  int64 id = 2;
  google.protobuf.Timestamp created_at = 3;
  map<string, Post> map_field = 5 [(buf.validate.field).map.keys = {
    string: {max_len: 1}
  } /* (buf.validate.field).map.values = { */ /* string: {max_len: 1} */ /* } */];
  test_enum enum_field = 11 [(buf.validate.field).enum = {defined_only: true}];
  repeated Post posts = 4;
}

message GetUserRequest {
  int64 id = 1 [(buf.validate.field).required = true];
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  int64 id = 1 [(buf.validate.field).required = true];
  google.protobuf.FieldMask field_mask = 2;
}

service UserService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
}
